name: Secure Linux Release

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Nix
        uses: cachix/install-nix-action@v27
        with:
          extra_nix_config: |
            experimental-features = nix-command flakes

      - name: Install Cosign
        uses: sigstore/cosign-installer@v3
        with:
          cosign-release: "v2.2.4"

      - name: Calculate Semantic Version
        id: version
        run: |
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          LATEST_VERSION=${LATEST_TAG#v}
          IFS='.' read -r MAJOR MINOR PATCH <<< "$LATEST_VERSION"

          NEW_PATCH=$((PATCH + 1))
          NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"

          # Check commit history for version triggers
          COMMIT_HISTORY=$(git log --pretty=format:"%s" $LATEST_TAG..HEAD)
          if echo "$COMMIT_HISTORY" | grep -qi '#major'; then
            NEW_VERSION="$((MAJOR + 1)).0.0"
          elif echo "$COMMIT_HISTORY" | grep -qi '#minor'; then
            NEW_VERSION="$MAJOR.$((MINOR + 1)).0"
          fi

          echo "version=v$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV

      - name: Build Linux Binary
        run: |
          nix develop --command sh -c "
            go build -o hypr-exiled-${{ env.NEW_VERSION }}-linux-amd64 ./cmd/hypr-exiled/
            mkdir -p release
            mv hypr-exiled-* release/
          "

      - name: Generate Signed Artifacts
        env:
          COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}
          COSIGN_PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}
        run: |
          # Create release directory if not exists
          mkdir -p release

          # Generate checksums first
          cd release
          sha256sum * > checksums.txt

          # Verify checksums file exists
          if [ ! -f checksums.txt ]; then
            echo "❌ Checksums file not found!"
            exit 1
          fi

          # Sign artifacts with non-interactive flags
          cosign sign-blob --yes \
            --key env://COSIGN_PRIVATE_KEY \
            --output-signature checksums.txt.sig \
            checksums.txt

          cosign sign-blob --yes \
            --key env://COSIGN_PRIVATE_KEY \
            --output-signature hypr-exiled.sig \
            hypr-exiled-${{ env.NEW_VERSION }}-linux-amd64

      - name: Verify Artifacts Exist
        run: |
          echo "Checking release artifacts..."
          ls -la release/

          # Check for binary
          if [ ! -f "release/hypr-exiled-${{ env.NEW_VERSION }}-linux-amd64" ]; then
            echo "❌ Missing binary file!"
            exit 1
          fi

          # Check for signatures
          if [ ! -f "release/checksums.txt.sig" ] || [ ! -f "release/hypr-exiled.sig" ]; then
            echo "❌ Missing signature files!"
            exit 1
          fi

          # Verify checksums file
          if [ ! -f "release/checksums.txt" ]; then
            echo "❌ Missing checksums file!"
            exit 1
          fi

      - name: Generate Changelog
        id: changelog
        run: |
          # Get the previous tag from version calculation
          PREV_TAG="${{ steps.version.outputs.latest_tag }}"

          # Generate changelog since last release
          CHANGELOG=$(git log --pretty=format:"- %s (%h)" ${PREV_TAG}..HEAD)

          # For empty first release
          if [ "$PREV_TAG" = "v0.0.0" ]; then
            CHANGELOG=$(git log --pretty=format:"- %s (%h)")
          fi

          # Escape newlines for GitHub output
          CHANGELOG="${CHANGELOG//'%'/'%25'}"
          CHANGELOG="${CHANGELOG//$'\n'/'%0A'}"
          echo "changelog=${CHANGELOG}" >> $GITHUB_OUTPUT

      - name: Create Signed Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ env.NEW_VERSION }}
          name: "v${{ env.NEW_VERSION }}"
          generate_release_notes: true
          files: |
            release/*
          body: |
            ## Verification Guide
            ```bash
            # Verify checksums signature
            cosign verify-blob --key cosign.pub \
              --signature checksums.txt.sig \
              checksums.txt
              
            # Verify binary signature
            cosign verify-blob --key cosign.pub \
              --signature hypr-exiled.sig \
              hypr-exiled-${{ env.NEW_VERSION }}-linux-amd64
              
            # Validate checksums
            sha256sum -c checksums.txt
            ```

            ## Changelog
            ${{ steps.changelog.outputs.changelog }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
